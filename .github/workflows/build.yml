name: Build and Push Docker Images

on:
  schedule:
    - cron: "0 20 * * *"
  push:
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      pg_version:
        description: "Optional: Build only this PostgreSQL major version (e.g., 16 or 17). Leave empty to build all versions defined in the matrix."
        required: false
        # No default, empty string '' means build all
        type: string
      force_build:
        description: "Force build even if image exists (true/false)."
        required: false
        type: boolean
        default: false
      update_readme_on_build:
        description: "Update README.md if a build occurs and tests pass (true/false)."
        required: false
        type: boolean
        default: true # Default to updating the README

jobs:
  build-postgres:
    strategy:
      matrix:
        pg_version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.pg_version != '' && fromJson(format('["{0}"]', github.event.inputs.pg_version)) || fromJson('["16","17"]') }}
    env:
      REGISTRY: ghcr.io
      REPO_NAME: ${{ github.repository }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      pg_version: ${{ matrix.pg_version }}
      FULL_IMAGE_TAG: ${{ steps.vars.outputs.FULL_IMAGE_TAG }}
      # Output whether the build step was skipped
      build_skipped: ${{ steps.build_step.outcome == 'skipped' }}
      # Output whether the image existed before the build attempt
      image_exists: ${{ steps.vars.outputs.IMAGE_EXISTS == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up system packages
        run: |
          apt-get update
          apt-get install -y curl unzip git ca-certificates

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry # Moved before get variables
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get variables and check image existence
        id: vars
        env: # Add env block to pass the version
          REPO_NAME: ${{ github.repository }}
          PG_MAJOR_VERSION: ${{ matrix.pg_version }}
        run: bun run get-vars

      - name: Build and push # Add if condition
        id: build_step
        # Only run if image doesn't exist OR force_build is true
        if: steps.vars.outputs.IMAGE_EXISTS != 'true' || github.event.inputs.force_build == true
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            BITNAMI_TAG=${{ steps.vars.outputs.BITNAMI_NAME }}
            PGVECTOR_BUILDER_TAG=${{ steps.vars.outputs.PGVECTOR_BUILDER_TAG }}
            PG_SEARCH_TAG=${{ steps.vars.outputs.PG_SEARCH_NAME }}
            PG_MAJOR_VERSION=${{ matrix.pg_version }}
          tags: |
            ${{ steps.vars.outputs.FULL_IMAGE_TAG }}
            ${{ steps.vars.outputs.TAG_SHORT }}
            ${{ steps.vars.outputs.TAG_WITH_FULL_POSTGRES_VERSION }}
            ${{ steps.vars.outputs.TAG_LATEST_PG }}
            ${{ matrix.pg_version == '17' && github.event_name != 'pull_request' && format('{0}/{1}:latest', env.REGISTRY, env.REPO_NAME) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.REPO_NAME }},push-by-digest=false,name-canonical=true,push=${{ github.event_name != 'pull_request' }}

      # Optional: Add a step to log the status for debugging
      - name: Log Build Status
        if: always() # Run this step even if previous steps fail or are skipped
        run: |
          echo "Image Exists Check: ${{ steps.vars.outputs.IMAGE_EXISTS }}"
          echo "Force Build Input: ${{ github.event.inputs.force_build }}"
          echo "Build Step Outcome: ${{ steps.build_step.outcome }}"
          echo "Job Output build_skipped: ${{ steps.build_step.outcome == 'skipped' }}"
          echo "Job Output image_exists: ${{ steps.vars.outputs.IMAGE_EXISTS == 'true' }}"

  test-runner-job:
    needs: build-postgres
    # Run tests only if the image existed before OR if the build step ran and succeeded (wasn't skipped)
    if: needs.build-postgres.outputs.image_exists == 'true' || needs.build-postgres.outputs.build_skipped != 'true'
    strategy:
      fail-fast: false # Optional: prevent job cancellations if one matrix job fails
      matrix:
        pg_version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.pg_version != '' && fromJson(format('["{0}"]', github.event.inputs.pg_version)) || fromJson('["16","17"]') }}
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: debian:bookworm-slim

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Use the specific image tag built or verified by the corresponding build job
        # Access the output directly; GitHub Actions maps matrix outputs automatically
        image: ${{ needs.build-postgres.outputs.FULL_IMAGE_TAG }}
        # Provide the password for postgres
        ports:
          - 5432:5432
        env:
          POSTGRESQL_USERNAME: testuser
          POSTGRESQL_POSTGRES_PASSWORD: rootpassword
          POSTGRESQL_PASSWORD: testpassword
          POSTGRESQL_DATABASE: testdb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd "pg_isready -U postgres -h 0.0.0.0 -p 5432"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up system packages
        run: |
          apt-get update
          apt-get install -y curl unzip git ca-certificates

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install

      - name: Setup CI environment
        run: bun run ci:setup

      # Replace individual tests with a single consolidated step
      - name: Run End-to-End Tests
        env:
          PGHOST: postgres
          PGPORT: 5432
          PGUSER: postgres # Use the root user to mitigate permission issues with extensions
          PGPASSWORD: rootpassword
          PGDATABASE: testdb
        run: bun run test:e2e --bail # Run the consolidated script, bail on first failure

  check_build_status:
    needs: build-postgres
    runs-on: ubuntu-latest
    if: always() # Run even if some matrix jobs fail, to check outcomes
    outputs:
      build_occurred: ${{ steps.check.outputs.build_occurred }}
    steps:
      - name: Check if any build was not skipped
        id: check
        # Use github-script to iterate through the matrix outputs
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const buildOutputs = ${{ toJSON(needs.build-postgres.outputs) }};
              console.log("Build Outputs Raw:\n", JSON.stringify(buildOutputs, null, 2));

              let buildOccurred = false;
              // Ensure buildOutputs is a valid object before iterating
              if (typeof buildOutputs === 'object' && buildOutputs !== null) {
                for (const jobKey in buildOutputs) {
                  // Check if the property belongs to the object itself
                  if (Object.hasOwnProperty.call(buildOutputs, jobKey)) {
                    // Use optional chaining for safety
                    const jobOutput = buildOutputs[jobKey];
                    console.log(`Processing job: ${jobKey}, Skipped: ${jobOutput?.build_skipped}`);
                    if (jobOutput?.build_skipped === 'false') {
                      buildOccurred = true;
                      console.log(`Build occurred found in job: ${jobKey}`);
                      break; // Exit loop once a build is found
                    }
                  }
                }
              } else {
                console.log("Warning: needs.build-postgres.outputs was not a valid object:", buildOutputs);
              }

              console.log("Final Build Occurred Status:", buildOccurred);
              core.setOutput('build_occurred', buildOccurred.toString());

            } catch (error) {
              console.error("Error processing build outputs:", error);
              // Default to false if any error occurs during script execution
              core.setOutput('build_occurred', 'false');
              core.setFailed(`Script failed: ${error.message}`);
            }

  update_readme:
    needs: [check_build_status, test-runner-job]
    if: >-
      needs.check_build_status.result == 'success' &&
      needs.test-runner-job.result != 'failure' &&
      needs.check_build_status.outputs.build_occurred == 'true' &&
      (github.event_name != 'workflow_dispatch' || github.event.inputs.update_readme_on_build == true)
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch history needed for commit user info
          fetch-depth: 0
          # Use a token with write permissions
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up system packages
        run: |
          apt-get update
          apt-get install -y curl unzip git ca-certificates

      - name: Install Bun
        uses: oven-sh/setup-bun@v2

      - name: Install dependencies # Needed for update-readme-all
        run: bun install

      - name: Update README
        run: bun run update-readme

      - name: Commit updated README
        uses: EndBug/add-and-commit@v9
        with:
          add: "README.md" # Specify the file to add
          message: "chore: update README badges and tags [skip ci]"
          default_author: github_actions # Use the GitHub Actions bot user
          # Ensure push happens only on main branch builds, not PRs etc.
          push: ${{ github.ref == 'refs/heads/main' }}
